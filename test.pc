#include "string_hash.h"
#include "log.h"
#include <unistd.h>
#include <oraca.h>
#include <sqlca.h>

extern int cache_size;

typedef struct {
  char user_id[17];
  char cust_id[17];
  char acct_id[17];
  char user_name[200];
  char user_status[3];
  char area_id[9];
  char county_id[9];
} user_t;

int main(int argc, char **argv) 
{
  pool_t             *pool = NULL;
  log_t              *log;
  int                 r;
  hash_init_t         hinit;
  size_t              record_cnt = 0;
  EXEC SQL BEGIN DECLARE SECTION;
  char BUSILINK[64];
  char DBLOGIN[64];
  char user_id[17];
  char cust_id[17];
  char acct_id[17];
  char user_name[200];
  char user_status[3];
  char area_id[9];
  char county_id[9];
  char total_cnt[16];
  EXEC SQL END DECLARE SECTION;

  pool = create_pool(1024 * 5);
  if (NULL == pool) {
    printf("create pool failed \n");
    exit(-2);
  }

  log = (log_t *)pcalloc(pool, sizeof(log_t));
  if (NULL == log) {
    exit(-2);
  }

  log->file.file_path.data = (char *)"./testlog.tr";
  log->file.file_path.len = strlen("./testlog.tr");

  log_open(log);

  log_msg(log, 0, "cache size = %d ", cache_size);

  hinit.max_size = 70000000;
  hinit.bucket_size = 64;
  hinit.key = string_hash_key_char;
  hinit.pool = pool;

  prepare_crypt_table();

  strcpy(BUSILINK, "BIL");
  strcpy(DBLOGIN, "bill/bill@10.1.1.186:1521/busi3");

  EXEC SQL CONNECT :DBLOGIN AT :BUSILINK;


  EXEC SQL AT :BUSILINK
    SELECT COUNT(1) INTO :total_cnt FROM busi_user;

  if (0 > sqlca.sqlcode) {
    log_msg(log, -1, "get count from busi_user failed");
    return ERROR;
  }

  record_cnt = atoi(total_cnt);
  record_cnt += 100;  
  if (0 >= record_cnt) {
    log_msg(log, -1, "record count is zero");
    return ERROR;
  }

  log_msg(log, 0, "total count of record is %z", record_cnt);

  hash_key_t *hash_user = (hash_key_t *) pcalloc(pool, 
                            record_cnt * sizeof(hash_key_t)); 
  if (NULL == hash_user) {
    exit(-1);
  }
  
  for (r = 0; r < record_cnt; r++) {
    hash_user[r].key = NULL;
    hash_user[r].value = NULL;
  }

  user_t *users = (user_t *)pcalloc(pool, record_cnt * sizeof(user_t)); 
  if (NULL == users) {
    exit(-1);
  }

  EXEC SQL AT :BUSILINK DECLARE CUR_USER CURSOR FOR 
    SELECT b.user_id, b.cust_id, b.acct_id, b.user_name, b.user_status, b.area_id, b.county_id
      FROM busi_user b ;

  EXEC SQL AT :BUSILINK OPEN CUR_USER;

  int i =0;

  while (1) {
    memset(user_id, 0, sizeof(user_id));
    memset(cust_id, 0, sizeof(cust_id));
    memset(acct_id, 0, sizeof(acct_id));
    memset(user_name, 0, sizeof(user_name));
    memset(user_status, 0, sizeof(user_status));
    memset(area_id, 0, sizeof(area_id));
    memset(county_id, 0, sizeof(county_id));

    EXEC SQL AT :BUSILINK FETCH CUR_USER INTO
      :user_id, :cust_id, :acct_id, :user_name, :user_status, :area_id, :county_id;

    strcpy(users[i].user_id, user_id);
    strcpy(users[i].cust_id, cust_id);
    strcpy(users[i].acct_id, acct_id);
    strcpy(users[i].user_name, user_name);
    strcpy(users[i].user_status, user_status);
    strcpy(users[i].area_id, area_id);
    strcpy(users[i].county_id, county_id);
    
    hash_user[i].key = users[i].user_id;
    hash_user[i].key_hash = hinit.key(users[i].user_id, 16);
    hash_user[i].value = (void *)( &users[i]);

    if (sqlca.sqlcode==1403 || sqlca.sqlcode == 100) break;
    i++;
  }

  EXEC SQL CLOSE CUR_USER;

  log_msg(log, 0, "read datas done");
  hash_init(&hinit, hash_user, i); 
  
  user_t *puser = NULL;

  log_msg(log, 0, "hash initdone");
 
  int j = 0; 

  // char enter_string[18] = {0};
  //
  // while (strcmp(enter_string, "quit")) {
  //   scanf("%s", enter_string);
  //
  //   if (strlen(enter_string) < 2) {
  //     continue;
  //   }
  //
  //   puser = (user_t *) hash_find(&hinit, enter_string);
  //   if (NULL == puser) {
  //     log_msg(log, -2, "userid=%s data is losed", enter_string);
  //   } else {
  //     log_msg(log, 0, "userid= %s, custid=%s, acct_id=%s, name=%s, status=%s, areaid=%s, countyid=%s",
  //             puser->user_id, puser->cust_id, puser->acct_id, puser->user_name, puser->user_status,
  //             puser->area_id, puser->county_id);
  //   }
  // }

  for (j = 0; j < i; j++) {
    puser = (user_t *) hash_find(&hinit, users[j].user_id);

    if (NULL == puser) {
      log_msg(log, -2, "userid=%s data is losed", users[j].user_id);
    }

    if (NULL != puser) {
      log_msg(log, 0, "userid= %s, custid=%s, acct_id=%s, name=%s, status=%s, areaid=%s, countyid=%s",
          puser->user_id, puser->cust_id, puser->acct_id, puser->user_name, puser->user_status,
          puser->area_id, puser->county_id);
    }

  }
  
  destroy_pool(pool);


  return 0;
}
